package orchestrator

import (
	"Calc_2GO/models"
	"Calc_2GO/pkg/calculator"
	"context"
	"encoding/json"
	"fmt"
	"log"
	"net"
	"net/http"
	"strconv"
	"strings"
	"sync"
	"time"

	pb "Calc_2GO/api"

	"github.com/golang-jwt/jwt/v5"
	"golang.org/x/crypto/bcrypt"
	"google.golang.org/grpc"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
)

type Orchestrator struct {
	storage     *Storage
	mu          sync.Mutex
	jwtSecret   []byte
	taskResults map[int]float64
}

type CalculatorServer struct {
	pb.UnimplementedCalculatorServer
	orchestrator *Orchestrator
}

func (s *CalculatorServer) GetTask(ctx context.Context, req *pb.TaskRequest) (*pb.Task, error) {
	task, exists := s.orchestrator.GetNextTask()
	if !exists {
		return nil, status.Errorf(codes.NotFound, "üîç –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞—á")
	}

	log.Printf("üì¶ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∑–∞–¥–∞—á–∞ %d: %.2f %s %.2f", task.ID, task.Arg1, task.Operation, task.Arg2)
	return &pb.Task{
		Id:        int32(task.ID),
		Arg1:      task.Arg1,
		Arg2:      task.Arg2,
		Operation: task.Operation,
	}, nil
}

func (s *CalculatorServer) SubmitResult(ctx context.Context, res *pb.Result) (*pb.ResultResponse, error) {
	log.Printf("üì© –ü–æ–ª—É—á–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –∑–∞–¥–∞—á–∏ %d: %.2f", res.Id, res.Result)

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–¥–∑–∞–¥–∞—á–∏
	if err := s.orchestrator.storage.SaveTaskResult(int(res.Id), res.Result); err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: %v", err)
		return nil, status.Errorf(codes.Internal, "üö® –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
	if err := s.orchestrator.storage.UpdateTaskStatus(int(res.Id), "done"); err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: %v", err)
		return nil, status.Errorf(codes.Internal, "üö® –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏")
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–¥–∑–∞–¥–∞—á
	exprID := int(res.Id) / 1000
	tasks, err := s.orchestrator.storage.GetTasksByExpressionID(exprID)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–∑–∞–¥–∞—á: %v", err)
		return nil, status.Errorf(codes.Internal, "üö® –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–¥–∞—á")
	}

	allDone := true
	for _, task := range tasks {
		if task.Status != "done" {
			allDone = false
			break
		}
	}

	if allDone {
		if err := s.orchestrator.storage.UpdateExpressionStatus(exprID, "done", res.Result); err != nil {
			log.Printf("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—ã—Ä–∞–∂–µ–Ω–∏—è: %v", err)
			return nil, status.Errorf(codes.Internal, "üö® –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≤—ã—Ä–∞–∂–µ–Ω–∏—è")
		}
		log.Printf("üéâ –í—ã—Ä–∞–∂–µ–Ω–∏–µ %d –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –†–µ–∑—É–ª—å—Ç–∞—Ç: %.2f", exprID, res.Result)
	}

	return &pb.ResultResponse{Success: true}, nil
}

func NewOrchestrator() *Orchestrator {
	return &Orchestrator{
		storage:     NewStorage(),
		jwtSecret:   []byte("my_super_secret_key"),
		taskResults: make(map[int]float64),
	}
}

func (o *Orchestrator) AddExpression(userID int, expr string) (int, error) {
	log.Printf("üõ†Ô∏è –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è userID %d: %s", userID, expr)
	id, err := o.storage.AddExpression(userID, expr)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏—è: %v", err)
		return 0, fmt.Errorf("üö® –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã—Ä–∞–∂–µ–Ω–∏—è")
	}

	tasks, err := calculator.CalcToTasks(id, expr)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ –≤—ã—Ä–∞–∂–µ–Ω–∏—è: %v", err)
		return 0, fmt.Errorf("üö® –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ")
	}

	for i := range tasks {
		tasks[i].UserID = userID
		log.Printf("üìå –°–æ–∑–¥–∞–Ω–∞ –∑–∞–¥–∞—á–∞: ID=%d, Arg1=%.2f, Arg2=%.2f, Op=%s",
			tasks[i].ID, tasks[i].Arg1, tasks[i].Arg2, tasks[i].Operation)
	}

	log.Printf("‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ %d –ø–æ–¥–∑–∞–¥–∞—á –¥–ª—è –≤—ã—Ä–∞–∂–µ–Ω–∏—è ID %d", len(tasks), id)
	if err := o.storage.AddTasks(tasks); err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á: %v", err)
		return 0, fmt.Errorf("üö® –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á")
	}

	log.Printf("üéØ –í—ã—Ä–∞–∂–µ–Ω–∏–µ ID %d —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ", id)
	return id, nil
}

func (s *CalculatorServer) GetTaskResult(ctx context.Context, req *pb.TaskResultRequest) (*pb.TaskResultResponse, error) {
	result, err := s.orchestrator.storage.GetTaskResult(int(req.TaskId))
	if err != nil {
		return nil, status.Errorf(codes.NotFound, "üö® –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
	}
	return &pb.TaskResultResponse{Result: result}, nil
}

func (o *Orchestrator) GetUserExpressions(userID int) []*models.Expression {
	exprs, err := o.storage.GetExpressions(userID)
	if err != nil {
		log.Printf("üö® –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—ã—Ä–∞–∂–µ–Ω–∏–π: %v", err)
		return []*models.Expression{}
	}
	return exprs
}

func (o *Orchestrator) GetExpression(id int) (*models.Expression, bool) {
	expr, err := o.storage.GetExpression(id)
	if err != nil {
		return nil, false
	}
	return expr, true
}

func (o *Orchestrator) GetNextTask() (*models.Task, bool) {
	o.mu.Lock()
	defer o.mu.Unlock()

	task, err := o.storage.GetNextTask()
	if err != nil {
		log.Println("üîÑ –ù–µ—Ç –∑–∞–¥–∞—á, –≥–æ—Ç–æ–≤—ã—Ö –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é:", err)
		return nil, false
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
	err = o.storage.UpdateTaskStatus(task.ID, "in_progress")
	if err != nil {
		log.Printf("üö® –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏: %v", err)
		return nil, false
	}

	return task, true
}

func (o *Orchestrator) HandleGetExpressions(w http.ResponseWriter, r *http.Request) {
	// –ü–æ–ª—É—á–∞–µ–º userID –∏–∑ —Ç–æ–∫–µ–Ω–∞
	claims := r.Context().Value("claims").(jwt.MapClaims)
	userID := int(claims["user_id"].(float64))

	expressions := o.GetUserExpressions(userID)
	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(expressions)
}

func (o *Orchestrator) HandleGetExpressionByID(w http.ResponseWriter, r *http.Request) {
	idStr := strings.TrimPrefix(r.URL.Path, "/api/v1/expressions/")

	id, err := strconv.Atoi(idStr)
	if err != nil {
		http.Error(w, "üö® –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID", http.StatusBadRequest)
		return
	}

	expr, exists := o.GetExpression(id)
	if !exists {
		http.Error(w, "üîç –í—ã—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", http.StatusNotFound)
		return
	}

	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(expr)
}

func (o *Orchestrator) HandleCalculate(w http.ResponseWriter, r *http.Request) {
	claims := r.Context().Value("claims").(jwt.MapClaims)
	userID := int(claims["user_id"].(float64))

	var request struct {
		Expression string `json:"expression"`
	}

	if err := json.NewDecoder(r.Body).Decode(&request); err != nil {
		http.Error(w, fmt.Sprintf("üö® –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: %v", err), http.StatusBadRequest)
		return
	}

	id, err := o.AddExpression(userID, request.Expression)
	if err != nil {
		http.Error(w, fmt.Sprintf("üö® –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤—ã—Ä–∞–∂–µ–Ω–∏—è: %v", err), http.StatusInternalServerError)
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusCreated)
	json.NewEncoder(w).Encode(map[string]string{"id": strconv.Itoa(id)})
}

func (o *Orchestrator) HandleTask(w http.ResponseWriter, r *http.Request) {
	switch r.Method {
	case http.MethodGet:
		task, exists := o.GetNextTask()
		if !exists {
			http.Error(w, "üîÑ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞—á", http.StatusNotFound)
			return
		}
		err := o.storage.UpdateExpressionStatus(task.ID, "in_progress", 0)
		if err != nil {
			log.Printf("üö® –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≤—ã—Ä–∞–∂–µ–Ω–∏—è: %v", err)
		}
		w.Header().Set("Content-Type", "application/json")
		json.NewEncoder(w).Encode(task)

	case http.MethodPost:
		o.HandleTaskResult(w, r)

	default:
		http.Error(w, "üö® –ú–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è", http.StatusMethodNotAllowed)
	}
}

func (o *Orchestrator) HandleTaskResult(w http.ResponseWriter, r *http.Request) {
	var request struct {
		ID     int     `json:"id"`
		Result float64 `json:"result"`
	}
	if err := json.NewDecoder(r.Body).Decode(&request); err != nil {
		http.Error(w, "üö® –ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å", http.StatusBadRequest)
		return
	}

	err := o.storage.SaveTaskResult(request.ID, request.Result)
	if err != nil {
		http.Error(w, "üö® –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞", http.StatusInternalServerError)
		return
	}

	err = o.storage.UpdateTaskStatus(request.ID, "done")
	if err != nil {
		http.Error(w, "üö® –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏", http.StatusInternalServerError)
		return
	}

	exprID := request.ID / 1000

	tasks, err := o.storage.GetTasksByExpressionID(exprID)
	if err != nil {
		http.Error(w, "üö® –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á", http.StatusInternalServerError)
		return
	}

	allDone := true
	for _, task := range tasks {
		if task.Status != "done" {
			allDone = false
			break
		}
	}

	if allDone {
		finalResult := request.Result
		if err := o.storage.UpdateExpressionStatus(exprID, "done", finalResult); err != nil {
			http.Error(w, "üö® –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", http.StatusInternalServerError)
			return
		}
	}

	w.WriteHeader(http.StatusOK)
}

func (o *Orchestrator) HandleRegister(w http.ResponseWriter, r *http.Request) {
	var req models.AuthRequest
	if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
		http.Error(w, "üö® –ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å", http.StatusBadRequest)
		return
	}

	hashedPassword, err := bcrypt.GenerateFromPassword([]byte(req.Password), bcrypt.DefaultCost)
	if err != nil {
		http.Error(w, "üö® –û—à–∏–±–∫–∞ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª—è", http.StatusInternalServerError)
		return
	}

	_, err = o.storage.CreateUser(req.Login, string(hashedPassword))
	if err != nil {
		http.Error(w, "üö® –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", http.StatusConflict)
		return
	}

	w.WriteHeader(http.StatusCreated)
	json.NewEncoder(w).Encode(map[string]string{"status": "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω"})
}

func (o *Orchestrator) HandleLogin(w http.ResponseWriter, r *http.Request) {
	var req models.AuthRequest
	if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
		http.Error(w, "üö® –ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å", http.StatusBadRequest)
		return
	}

	user, err := o.storage.GetUserByLogin(req.Login)
	if err != nil {
		http.Error(w, "üîê –ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", http.StatusUnauthorized)
		return
	}

	if err := bcrypt.CompareHashAndPassword([]byte(user.PasswordHash), []byte(req.Password)); err != nil {
		http.Error(w, "üîê –ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", http.StatusUnauthorized)
		return
	}

	token := jwt.NewWithClaims(jwt.SigningMethodHS256, jwt.MapClaims{
		"user_id": user.ID,
		"exp":     time.Now().Add(24 * time.Hour).Unix(),
	})

	tokenString, err := token.SignedString(o.jwtSecret)
	if err != nil {
		http.Error(w, "üö® –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞", http.StatusInternalServerError)
		return
	}

	json.NewEncoder(w).Encode(map[string]string{"token": tokenString})
}

func (o *Orchestrator) HandleGetTaskResult(w http.ResponseWriter, r *http.Request) {
	idStr := strings.TrimPrefix(r.URL.Path, "/internal/task/")
	id, err := strconv.Atoi(idStr)
	if err != nil {
		http.Error(w, "üö® –ù–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞–¥–∞—á–∏", http.StatusBadRequest)
		return
	}

	o.mu.Lock()
	result, exists := o.taskResults[id]
	o.mu.Unlock()

	if !exists {
		http.Error(w, "üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω", http.StatusNotFound)
		return
	}

	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(map[string]float64{"result": result})
}

func (o *Orchestrator) AuthMiddleware(next http.HandlerFunc) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		authHeader := r.Header.Get("Authorization")
		if authHeader == "" {
			http.Error(w, "üîê –¢—Ä–µ–±—É–µ—Ç—Å—è –∑–∞–≥–æ–ª–æ–≤–æ–∫ Authorization", http.StatusUnauthorized)
			return
		}

		tokenString := strings.TrimPrefix(authHeader, "Bearer ")
		token, err := jwt.Parse(tokenString, func(token *jwt.Token) (interface{}, error) {
			return o.jwtSecret, nil
		})

		if err != nil || !token.Valid {
			http.Error(w, "üîê –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω", http.StatusUnauthorized)
			return
		}

		ctx := context.WithValue(r.Context(), "claims", token.Claims)
		next.ServeHTTP(w, r.WithContext(ctx))
	}
}

func (o *Orchestrator) StartGRPCServer() {
	lis, err := net.Listen("tcp", ":50051")
	if err != nil {
		log.Fatalf("üö® –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ gRPC —Å–µ—Ä–≤–µ—Ä–∞: %v", err)
	}

	s := grpc.NewServer()
	pb.RegisterCalculatorServer(s, &CalculatorServer{orchestrator: o})

	log.Println("üü¢ gRPC —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ :50051")
	if err := s.Serve(lis); err != nil {
		log.Fatalf("üö® –û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã gRPC —Å–µ—Ä–≤–µ—Ä–∞: %v", err)
	}
}

func (o *Orchestrator) StartServer() {
	if err := o.storage.db.Ping(); err != nil {
		log.Fatal("üö® –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:", err)
	}

	http.HandleFunc("/api/v1/register", o.HandleRegister)
	http.HandleFunc("/api/v1/login", o.HandleLogin)
	http.HandleFunc("/internal/task/", o.HandleGetTaskResult)

	http.HandleFunc("/api/v1/calculate", o.AuthMiddleware(o.HandleCalculate))
	http.HandleFunc("/api/v1/expressions", o.AuthMiddleware(o.HandleGetExpressions))
	http.HandleFunc("/api/v1/expressions/", o.AuthMiddleware(o.HandleGetExpressionByID))

	http.HandleFunc("/internal/task", o.HandleTask)

	log.Println("üü¢ HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ :8080")
	if err := http.ListenAndServe(":8080", nil); err != nil {
		log.Fatal("üö® –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ HTTP —Å–µ—Ä–≤–µ—Ä–∞:", err)
	}
}
func (s *CalculatorServer) SetOrchestrator(o *Orchestrator) {
	s.orchestrator = o
}
